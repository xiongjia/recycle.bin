%title Utility
%toc

= Windows Debugger =
== Documentation ==
 * Windbg help documentation <br>
   - MSDN: https://msdn.microsoft.com/en-us/library/windows/hardware/ff551063%28v=vs.85%29.aspx
   - 本地的 windbg help documentation:
     * 在 windbg 所在目錄中的 .chm file。windbg 中按 F1 可直接打開該幫助文件.
     * 用 `.hh [Text]` Meta-Command 來打開或查找幫助。比如: 想查看 `x` command 可以用 `.hh x`
 * 書籍:
   - <Advanced Windows Debugging> : http://book.douban.com/subject/2357194/
   - <Advanced .NET Debugging> : http://book.douban.com/subject/4030483/
 * 在綫短文: 
   - Windbg A to Z ( .pdf file on my dropbox) <br>
     https://dl.dropboxusercontent.com/u/41890507/dev-docs/ms/windbg-a2z.pdf 
   - Getting started with windbg - part I & II
     * http://blogs.msdn.com/b/johan/archive/2007/11/13/getting-started-with-windbg-part-i.aspx 
     * http://blogs.msdn.com/b/johan/archive/2007/11/26/getting-started-with-windbg-part-ii.aspx 
   - How to install Windbg and get your first memory dump
     * http://blogs.msdn.com/b/johan/archive/2007/01/11/how-to-install-windbg-and-get-your-first-memory-dump.aspx
   - How to troubleshoot OutOfMemoryExceptions
     * http://blogs.msdn.com/b/johan/archive/2007/01/11/i-am-getting-outofmemoryexceptions-how-can-i-troubleshoot-this.aspx

== Tips (日常簡單使用) ==
=== 速查 ===
- Symbols
  * `x [Options] Module!Symbol` - Examine Symbols , 查找 Modules 中的 Symbols.
- Breakpoints
  * bp, bu, bm - 设置 Breakpoints. 
    - `bp` 设置 breakpoint 在指定位置
    - `bu` 设置 Unresolved Breakpoint 在指定位置
    - `bm` 设置一个或一组符合条件的 Symbol Breakpoints
  * `bl [/L] [Breakpoints]` - Breakpoint List, 显示当前 Breakpoint 信息和状态
  * `bc Breakpoints` - 删除 Breakpoints
  * `bd Breakpoints` - Breakpoints Disable
  * `be Breakpoints` - Breakpoints Enable
 
=== 其他 ===
- x (Examine Symbols) <br>
  `x` 命令用來查詢 Symbols。找到對應的 Symbols 名字可以幫助設置 Breakpoint。
  調試沒有代碼的程序時特別有用。
  - 查找時對應的 .pdb 應該已經被加載。
  - 基本命令 `x [Options] Module!Symbol`
  - 所有的 `[Options]` 參考 `.hh x`
  - `Module!Symbols` 可以使一個 pattern 。比如 `ModuleA!*` 表示 ModuleA 的所有 Symbols。
    ( Module 部分也可以用 pattern , 只是顯示的結果比較多。
      個人覺得應該用 `lm m *Module pattern*` 先找到對應的 module。可以減少不必要的輸出。)
  - 舉例:
{{{
0:000> lm m *test*
start             end                 module name
00000001`3f740000 00000001`3f74e000   dbg_test C (private pdb symbols)  E:\dbg-test.pdb
0:000> x /v /t dbg_test!*test*
prv global 00000001`3f749030    4 int dbg_test!g_test_number = 0n1
prv func   00000001`3f741030   28 <function> dbg_test!TestFunc (void)
prv func   00000001`3f741150   31 <function> dbg_test!TestClz::~TestClz (void)
prv func   00000001`3f741190   31 <function> dbg_test!TestClz::Print (void)
prv func   00000001`3f741100   36 <function> dbg_test!TestClz::TestClz (void)
}}}
    * 用 `lm m *test*` 找到對用的 module name. 
    * 用 `x /v /t dbg_test!*test*` 來查看 dbg_test module 中所有帶有 "test" 的 Symbols。
      - `/v /t` 表示顯示 Symbol 類型比如 local, global, parameter, function, or unknown
    * 下面的 windbg 輸出, 對應列出了所有的 Symbols。
      - 有了這些名字后就可以在 function 上設置 breakpoint 比如 `bp dbg_test!TestFunc` 
      - 也可以用 `dt` 來查看,比如 `dt dbg_test!g_test_number` 或 `dt dbg_test!TestFunc`

=== Symbols ===
XXX (待續, 整理中 2015 年 7 月 7 日 )

=== Breakpoint ===
XXX (待續, 整理中 2015 年 7 月 7 日 )

= Java =
== Documentation ==
* Gradle: http://www.gradle.org/documentation
* Design pattern samples: https://github.com/iluwatar/java-design-patterns  <br>
  常用的 design pattern 的實現，代碼簡潔且可以編譯、運行。比看書有趣多了。 
* awesome 系列: 
 - awesome-java: https://github.com/akullpp/awesome-java

== Gradle ==
[[http://www.gradle.org/|Gradle]] 和 Ant; Maven 類似。
Gradle 採用了 Groovy 來做為開發語言，比較精煉、短小。(個人覺得比 Maven 要簡潔許多)
另外不少 Android 工程也採用了 Gradle 。
* 具體需要閱讀 Gradle 的文檔: http://www.gradle.org/documentation
* 我自己的一些實驗代碼中幾乎都用了 Gradle:
 - [[https://github.com/xiongjia/scratch/tree/master/jscratch|jscratch]] : 算是一個簡單的 Gradle Java Application 模板
 - [[https://github.com/xiongjia/scratch/tree/master/jwebsocket|jwebsocket]] : 一個簡單的 WebSocket Echo server 
 - [[https://github.com/xiongjia/scratch/tree/master/jmeter-example-sampler|JMeter Example Sampler]] : 一個簡單的 JMeter plugin 

== Remote debugging ==
很多時候，是用這個辦法來 Debug 一個第三方編譯的工程。
比如: 我有 [[https://jmeter.apache.org/|Apache JMeter]] 的代碼和 Binary .jar ，
但是沒有把他加入 Eclipse 工程裏，如果想 Debug 這個 JMeter 就可以用以下步骤。
* 基本步骤:
 - 编译 Java Application 时启用 _debug_ 参数 (否則可能會在 Debug 過程中看不清一些變量之類的)。比如:
   * ANT Build.xml 中 javac task: <br>
     `<javac srcdir="src" destdir="build/classes" debug="true" debuglevel="lines,vars,source"/>` <br>
     _debug="true"_ 和 _debuglevel="lines,vars,source"_ 表示 javac 編譯時啟用指定 Level 的 debug 
 - 用 Debug 参数启动 Java Application , 比如: <br>
   `java -Xdebug -Xrunjdwp:server=y,transport=dt_socket,address=8000,suspend=y -jar MyApp.jar` <br>
   * _'suspend=y'_ 表示掛起 app 等待 debug attach. 也可以用 _'_suspend=n'_ 表示不等待。<br>
   * _'address=8000'_ 表示對應的端口號.最好選數字大一點的(因為小的端口號, unix 上需要 root 權限).
 - 打开 Eclipse 配置 _'Debug Configurations'_ , 增加對應的 _'Remote Java Application'_ .
   * 在 Connect 中填上對應的 Host 和 Port;
   * Source 中增加對應的 source code directory. 
   * 可以在 attach 前先在對應的 method 上設置 breakpoint 以免錯過.
     準備就緒後在 Debug 裏選擇自己配置的 Remote debug 選項就可以 attach 到對應的進程上.

== JDK Tools ==
=== jsadebugd ===
可以 Attach 到一個已經啟動了的 Java process 來幫助 debug。 <br>
(JDK 的幫助文件和 Oracle 的 online documentation 都有具體的說明。)
* 基本步驟:
 - `jsadebugd <pid>` : attach 到要 debug 的 Java process，這個過程可能比較慢需要多等一下。
 - `jdb -connect sun.jvm.hotspot.jdi.SADebugServerAttachingConnector:debugServerName=localhost` <br>
   運行 jdb 並且連結到 Debugger server 上。 
   - 可以用 `jdb -listconnectors` 查看 debugger server
   - 用 `-sourcepath` 把 source code 的 path 告訴 gdb 否則可能會看不到 debug 代碼.
 - jdb 連上之後用 `threads` 命令查看當前所有的 Threads ; 用 `thread` 命令跳到自己想看的 Thread;
   用 `where`, `up`, `down` 來查看/切換 Thread stacktrace （具體參看 jdb 文檔或者在 jdb 中使用 `help` 命令)

=== jstack ===
用來顯示某個正在工作的 Java VM 的所有 Threads stack traces。
(JDK 的幫助文件和 Oracle 的 online documentation 都有具體的說明。)
* 基本使用: `jstack -J-d64 -l <pid>` 其中 '-J-d64' 是 64bit JVM 是要用的一個參數。

