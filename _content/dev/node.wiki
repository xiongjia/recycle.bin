%title Node
%toc

記錄/備忘一些 Nodejs 使用實例。

= Documentation =
* Node & NPM
 * NODEJS API: http://nodejs.org/api/
 * NPM: https://www.npmjs.org/doc/
 * NODE wiki: https://github.com/joyent/node/wiki
* awesome 系列
 * awesome-nodejs: https://github.com/sindresorhus/awesome-nodejs  
 * awesome-nodejs: https://github.com/vndmtrx/awesome-nodejs 
* 3rd Party Packages:
 * underscorejs: http://underscorejs.org/
 * lodash: http://lodash.com/docs
 * grunt: http://gruntjs.com/
 * bower: http://bower.io/
 * mocha: http://visionmedia.github.io/mocha/

-----

= Environment =
Node 環境主要有兩部分組成: 
* Node 是 JS 腳本的執行者。
  他封裝了 [[http://code.google.com/p/v8/|JavaScript Engine V8]] 
  內置了一套類似 CommonJS 的 JavaScript Module system 。
  並且封裝了一套 API 比如： http, process (參考 http://nodejs.org/api/ )。 
{{{
+---------------------------------------+     +--------------------------------+
| NODE                                  |<--->| +----------------------------+ |
|=======================================|     | | Your .JS Scripts or Modules| |
| +-----------------------------------+ |     | +----------------------------+ |
| | Node engine                       | |     |                                |
| |===================================| |     | +-------------------------+    |
| | Node modules (e.g. http, process) | |     | | 3rd party Node Packages |    |
| +-----------------------------------+ |     | +-------------------------+    |
|---------------------------------------|     +--------------------------------+
| +----+ +---------+                    |
| | v8 | | libuv   |                    |
| +----+ | zlib    |                    |
|        | openssl |                    |
|        | cares   |                    |
|        | ...     |                    |
|        +---------+                    |
+---------------------------------------+
}}}
* Node 的 Package Manager 。目前主要的 Package Manager 是 [[https://www.npmjs.org/|NPM]] 。

----

== Installation ==
* 從安裝包安裝。http://nodejs.org/download/ 下載安裝包。(注意：OS 種類和32/64 bit ) 
* 通過 binary 安裝。 http://nodejs.org/dist/ 下找到自己需要 node & npm version 。 注意:
  # 操作系統和 32/64 bit 版本在不同的目錄中。
  # 在 http://nodejs.org/dist/npm-versions.txt 中有 node 和 npm 版本的對應關係。
  # 下載後把 node 和 npm 的所在目錄加入 `PATH`  環境變量中。
* 通過 source code 安裝:
  # 從 https://github.com/joyent/node clone node 代碼
  # Checkout 自己需要的 branch 。比如: `git checkout v0.10.3-release` 代表 node v0.10.3 版本。
  # 運行 `configure --prefix=<node & npm install path>` 
  # build & install: `make` & `make install`
  # 把 prefix folder 加入 `PATH` 環境變量中。
* Notes:
  * 通過 binary 或 source code 安裝時，如無特殊目的則應該選擇已經 release 的版本。
    如果選擇 alpha, beta, pre release 可能會造成某些 npm package 在檢查 node version 時抱錯。
  * 不同 OS 的 Package Manager 也可以直接安裝(比如: OSX 的 Homebrew, ArchLinux 的 Pacman等),
    參考: [[Installing Node.js via package manager|https://github.com/joyent/node/wiki/Installing-Node.js-via-package-manager]]

----

== Configuration ==
 * `$HOME/.npmrc` 是 npm 的配置。https://www.npmjs.org/doc/files/npmrc.html <br>
   下面這個 Sample, 重新設置 prefix, cache 目錄，並把 registry 設置為 https://registry.npmjs.org :
{{{

  prefix = ~/.node/.npm
  cache = ~/.node/.npm-cache
  registry = https://registry.npmjs.org

}}}
   npm prefix 目錄就是 node global package 的安裝目錄，默認情況是和 npm 在一起的。 <br>
   修改這個設置很有必要因為 npm 目錄往往是 root 權限的目錄。把這個目錄放到 $HOME 
   下這樣無需 root 權限就可以安裝 global package 了。 <br>
   (注意: 這個目錄需要被加到 $PATH 中，否則 global package 不能被使用)

-----

= Development environment = 
主要用到的開發環境 = VIM + VIM syntastic + JSHint + node-inspector + Grunt + Mocha。<br>
VIM 編輯, JSHint + VIM syntastic  靜態語法檢查, node-inspector 調試, Grunt build task, Mocha unit test。
* VIM: http://www.vim.org/
* VIM syntastic: https://github.com/scrooloose/syntastic
* JSHint: http://jshint.com/docs/
* node-inspector: https://github.com/node-inspector/node-inspector
* Grunt: http://gruntjs.com/
* Mocha: http://visionmedia.github.io/mocha/

----

= Practice =
== Web Server ==
* Mock Server <br>
 主要是測試 HTTP server 的一個簡單 Server。具體參考 Gist 裏的 readme。
 - gist: https://gist.github.com/xiongjia/428402521312456ceccf

== Database ==
* Knex Sample <br>
 Knex 是一個 database query builder 通過 Knex 的封裝，可以使同一份代碼工作與不同種類的數據庫。
 具體參考 Gist 裏的 readme。
 - gist:  https://gist.github.com/xiongjia/85df587ce3535d1c6151

== Misc ==
* Node Stream example <br>
 通過從 require('stream').Transform 繼承得方式實現，stream 式樣得協議解析。
 - gist: https://gist.github.com/xiongjia/6867670
 - protocol 得格式和一些注意事項已經被寫在代碼註解裏了。
* Node heapdump example<br>
 通過 node-heapdump 來 dump 當前得 v8 狀態，隨後可以通過 Chrome developer tool 來檢測這個 dump 文件。
 - gist: https://gist.github.com/xiongjia/7688374
 - 需要在用前裝 node-heapdump: `npm install node-heapdump`

