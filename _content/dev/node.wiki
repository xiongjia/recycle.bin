%title Node (Last update: Tue Feb  4 19:18:10 CST 2014)
%toc

= Setup environment =
开发环境可以使用最新版本的 Node。如果是生产环境，首先到 http://nodejs.org/ 
找到最后的 *stable* release version，再根据需要决定要装的版本。<br>
== Windows ==
多种选择:
* 用 .msi 安装包安装，只要看清楚 32 or 64 bit version 
* 在 http://nodejs.org/dist/ 下找到自己需要 node & npm binary 下载并解压。比如安装最新的 64 bit Node: <br>
  # 下载 http://nodejs.org/dist/latest/x64/node.exe 
  # 如需要 Debug Node 本身则需要对应的 .pdb http://nodejs.org/dist/latest/x64/node.pdb
  # 下载需要的 npm 版本 http://nodejs.org/dist/npm/ ( Windows 版下载 .zip, 会提供对应的 .bat or .cmd 文件)
  # 建立安装目录,加入版本名方便以后升级。 比如: 
{{{class="brush: ps; gutter: false; toolbar: false;"
    mkdir  $HOME/node
    mkdir  $HOME/node/npm-1.3.9
    mkdir  $HOME/node/node-v0.10.22
}}}
  # copy node.exe & .pdb to "$HOME/node/node-v0.10.22"
  # Unzip the npm-1.3.9.zip to "$HOME/node/npm-1.3.9"
  # 在 $PATH 里增加, 这2个路径
  # 创建 "$HOME/.npmrc" 指定对应的 prefix 和 cache，以方便管理 NPM 包。(目录根据需要自己指定)
  详细 npmrc 参数可以参考文档 https://npmjs.org/doc/files/npmrc.html
{{{class="brush: ps; gutter: false; toolbar: false;"
   prefix = D:\usr\misc\node\npm-packages
   cache = D:\usr\misc\node\npm-cache
}}}
  # 把 prefix 所指定的路徑放入 $PATH 環境變量裏，這樣 NPM 的 global package 就可以直接使用了。

* 从 NODE 源代码编译
 # 从 github clone 代码 https://github.com/joyent/node
 # 在 branch list 里找到自己需要的 release 版本,并且 checkout 这个 branch。(比如: v0.11.11-release) 
 # 打开 README.md 查看  Windows 编译步骤 。(目前版本的编译需要预先准备 Python 2.6/2.7 和 VS 2010 or 2012) 
 # 编译后会得到对应的 node.exe
 # 目前版本 的 NODE 会把 NPM 会放在 "deps" 目录下。(可以通过搜索 npm.cmd 来找到他)
 # 重复上面下载安装的步骤，即可得到自己编译的 Windows 版本 node 环境。

== Unix ==
多种选择:
* 包管理安装
 # 各个 unix 不同。
   如: ArchLinux 用 `pacman -S nodejs`, gentoo 用 `emerge nodejs`, 
   osx 有多种选择,我自己是用 `brew install node` <br>
   Node 官方 Wiki 有个很全的介绍 [[https://github.com/joyent/node/wiki/Installing-Node.js-via-package-manager|Installing Node.js via package manager]] <br>
 # 创建 $HOME/.npmrc, 比如:
  详细 npmrc 参数可以参考文档 https://npmjs.org/doc/files/npmrc.html
{{{class="brush: ps; gutter: false; toolbar: false;"
   prefix = ~./.node/npm-packages
   cache = ~/.node/npm-cache
}}}
  根据自己需要来指定 npm package 的路径。如果把路径放在 "~/" 之下:
  - 优点: 可以避免 NPM 在 install global package 时的 root 权限需求。
  - 缺点: 不同 user 间不能共享  global package。<br>
  我自己觉得 Node 在大多数情况下不需要 global package。所以放在 HOME 下比较好。
  至于 'cache' 路径，是可以考虑用一个公用的目录来避免反复下载的。
* 下载安装
 # 可以在 http://nodejs.org/dist/ 找到自己需要的 node & npm 的 tar.gz 包。
   但是需要根据自己的 unix 版本,来找对应的 version。<br>
   比如: linux-x86, linux-x64 对应 linux ; darwin-x86, darwin-x64 对应 osx <br>
 # npm 一般会被包含在 tar.gz 
 # 其余步骤类似于 windows 的 下载安装，更新 对应的 $PATH 和 ".npmrc" 即可
* Install from Source <br>
 在 Unix 上 install from soruce 可能是最常用的 (如果是开发环境的话)
 # 从 github clone 代码 https://github.com/joyent/node
 # 在 branch list 里找到自己需要的 release 版本,并且 checkout 这个 branch。(比如: v0.11.11-release) 
 # 运行 `./configure --prefix=~/.node; make; make install` 
   这 3 条 command 后，node 和 npm 就被安装到了 ~/.node 下。
   (不同版本编译可能会有变化，如遇问题参考 README.md )
 # 最后像之前"包管理安装“那样更新对应的 .npmrc 和 $PATH 即可。

-----

= Tips =
* 一些基本的容器, copy/clone 之类的操作<br>
 选 Lo-Dash 或 underscore。俩者类似, Lo-Dash 后出来些，更新好像更频繁些，据说性能也好一点。
 # [[https://github.com/lodash/lodash/|Lo-Dash]] -  
 Document: http://lodash.com/docs
 # [[https://github.com/jashkenas/underscore|underscore]] -  
 Document: http://underscorejs.org/

* string 操作<br>
 Node 自带的 `util` 有一部分。不过很不够用。
 目前找到的功能比较丰富的包是 
 [[https://github.com/epeli/underscore.string|underscore.string]]

* 异步操作<br>
 Async 或者 Q。自己一般使用 Async 。主要要是看实现上 Async 似乎更简单些。
 为了 KISS 原则也应该轻量级的东西。<br>
 这两者更新都不是很频繁，估计会有新的代替者出现吧?
 # Async: https://github.com/caolan/async
 # Q: https://github.com/kriskowal/q

-----

= 冷门 Modules =
== rsyncwrapper  ==
* [[https://github.com/jedrichards/rsyncwrapper|rsyncwrapper]] <br>
 - Rsync 的封装，之前自己用于网站的自动发布。<br>
 (Windows 上没有用过，估计是需要特殊配置的 ssh 和 rsync windows client 的。)
 - Sample: (具體的 options 在他的 github readme 裏有) <br>
{{{class="brush: js; gutter: false; toolbar: false;"
  var rsync, rsyncOpt;
  /* rsync options */
  rsyncOpt = {
    src: './dist/',
    dest: 'username@host:remote_directory',
    recursive: true
  };
  /* execute rsync upload */
  rsync = require("rsyncwrapper").rsync;
  rsync(rsyncOpt, function (err, stdout, stderr, cmd) {
    if (err) {
      /* XXX Rsync error */        
    }
  });
}}}

-----

= Grunt =
== Documentation ==
* http://gruntjs.com/ <br>
 也可以再 Github 上的 grunt-docs 找到 https://github.com/gruntjs/grunt-docs <br>
 至少有3部分: Plugins, Documentation, API。
 # 閱讀 Documentation 裏的 _getting started_  http://gruntjs.com/getting-started
 # 掌握基本 Task 概念
 # 掌握基本的 API (比如: Log, File, config, option ... etc.) 
 # Async Task 的使用 
 # 掌握常用的 Plugins (安裝，加載，配置）
 # 知道 plugin 的製作過程 http://gruntjs.com/creating-plugins

== Useful plugins ==
* 現有的 plugins 可以在 http://gruntjs.com/plugins 找。
* 如果是 grunt contrib plugin 也可以在 https://github.com/gruntjs search 到。
  (如果無特殊需要，最好優先選用 grunt contrib 的 plugin。)
* 如何生成自己的 plugin 可以参考, Grunt document 里的 Creating plugins 章节。
  http://gruntjs.com/creating-plugins
=== grunt-contrib-jshint ===
*  [[https://github.com/gruntjs/grunt-contrib-jshint|grunt-contrib-jshint]] <br>
 jshint 检查
 # Install: `npm install grunt-contrib-jshint --save-dev`
 # Load: `grunt.loadNpmTasks('grunt-contrib-jshint');` 
 # Sample configuration: (具體的 options 在他的 github readme 裏有) <br>
{{{class="brush: js; gutter: false; toolbar: false;"
  grunt.initConfig({
    jshint: {
      /* read the jshint option from .jshintrc  */
      options: { jshintrc: '.jshintrc' },
      /* target: { source files }  */
      gruntfile: { src: 'Gruntfile.js' },
      lib: { src: ['lib/**/*.js'] },
      bin: { src: ['test1.js', 'test2.js'] }
    }
  };
}}}
=== grunt-contrib-clean ===
* [[https://github.com/gruntjs/grunt-contrib-clean|grunt-contrib-clean]] <br>
 清理文件或目录
 # Install:  `npm install grunt-contrib-clean --save-dev`
 # Load:  `grunt.loadNpmTasks('grunt-contrib-clean');` 
 # Sample configuration: (具體的 options 在他的 github readme 裏有) <br>
{{{class="brush: js; gutter: false; toolbar: false;"
  grunt.initConfig({
    /* remove ./dist */
    clean: ['dist']
  };
}}}
=== grunt-contrib-copy ===
* [[https://github.com/gruntjs/grunt-contrib-copy|grunt-contrib-copy]] <br>
 copy 文件，目录。可以用于打包之类的
 # Install:  `npm install grunt-contrib-copy --save-dev` 
 # Load:  `grunt.loadNpmTasks('grunt-contrib-copy');` 
 # Sample configuration: (具體的 options 在他的 github readme 裏有) <br>
{{{class="brush: js; gutter: false; toolbar: false;"
  grunt.initConfig({
    /* copy all the .html files from output to dist */
    copy: {
      content: {
        expand: true,
        cwd: 'output/',
        src: [ '**/*.html' ],
        dest: 'dist/'
      }
    }
  };
}}}
=== grunt-contrib-concat ===
* [[https://github.com/gruntjs/grunt-contrib-concat|grunt-contrib-concat]] <br>
 合并 js or css files。
 # Install: `npm install grunt-contrib-concat --save-dev` 
 # Load:  `grunt.loadNpmTasks('grunt-contrib-concat');`
 # Sample configuration: (具體的 options 在他的 github readme 裏有) <br>
{{{class="brush: js; gutter: false; toolbar: false;"
  grunt.initConfig({
    concat: {
      css: { src: [ 'src1.css', 'src2.css' ], dest: 'dest.css' },
      js: { src: [ 'src1.js', 'src2.js' ], dest: 'dest.js }
    }
  };
}}}
=== grunt-contrib-cssmin === 
* [[https://github.com/gruntjs/grunt-contrib-cssmin|grunt-contrib-cssmin]] <br>
 压缩css。( 也可以考虑用 grunt-yui-compressor。提醒: 目前的 YUI 依赖 Java。）
 # Install:  `npm install grunt-contrib-cssmin --save-dev` 
 # Load:  `grunt.loadNpmTasks('grunt-contrib-cssmin');`
 # Sample configuration: (具體的 options 在他的 github readme 裏有) <br>
{{{class="brush: js; gutter: false; toolbar: false;"
  grunt.initConfig({
    cssmin: {
      minify: { src: [ 'src.css' ], dest: 'dest.css' }
    }
  };
}}}
=== grunt-contrib-uglify ===
* [[https://github.com/gruntjs/grunt-contrib-uglify|grunt-contrib-uglify]] <br>
 压缩/丑化 js。( 也可以考虑用 grunt-yui-compressor。提醒: 目前的 YUI 依赖 Java。）
 # Install:  `npm install grunt-contrib-uglify --save-dev`
 # Load:  `grunt.loadNpmTasks('grunt-contrib-uglify');`
 # Sample configuration: (具體的 options 在他的 github readme 裏有) <br>
{{{class="brush: js; gutter: false; toolbar: false;"
  grunt.initConfig({
    uglify: {
      dist: { src: 'src.js', dest: 'dest.js' }
    }
  };
}}}
=== grunt-contrib-connect ===
* [[https://github.com/gruntjs/grunt-contrib-connect|grunt-contrib-connect]] <br>
 創建一個靜態的 Web Server，一般用於自動測試或開發時本地看效果用一下。 
 # Install:  `npm install grunt-contrib-connect --save-dev`
 # Load:  `grunt.loadNpmTasks('grunt-contrib-connect');`
 # Sample configuration: (具體的 options 在他的 github readme 裏有) <br>
{{{class="brush: js; gutter: false; toolbar: false;"
  grunt.initConfig({
    connect: {
      dist: {
        options: { port: 9000, base: 'dist', debug: true, keepalive: true }
      }
    }
  };
}}}
=== grunt-contrib-watch ===
* [[https://github.com/gruntjs/grunt-contrib-watch|grunt-contrib-watch]] <br>
 監視對應的文件系統，當發生變化時自動執行對應的 Task。 
 # Install:  `npm install grunt-contrib-watch --save-dev`
 # Load:  `grunt.loadNpmTasks('grunt-contrib-watch');`
 # Sample configuration: (具體的 options 在他的 github readme 裏有) <br>
{{{class="brush: js; gutter: false; toolbar: false;"
  grunt.initConfig({
    watch: {
      /* 1. monitor the .html files in output folder
       * 2. call the 'copy:content' task if the files changed
       */
      content: {
        files: ['output/**/*.html'],
        tasks: ['copy:content'],
        options: { spawn: false }
      }
    },
 };
}}}

