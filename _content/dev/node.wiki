%title Node
%toc

= Environment =
Node 環境主要有兩部分組成: 
* Node 是 JS 腳本的執行者。
  他封裝了 [[http://code.google.com/p/v8/|JavaScript Engine V8]] 
  內置了一套類似與 CommonJS 的 JavaScript Module system,
  並且封裝了一套 API 比如： http, process (參考 http://nodejs.org/api/ )。 
{{{
 +---------------------------------------+      +--------------------------------+
 | NODE                                  |<---->| +----------------------------+ |
 |=======================================|      | | Your .JS Scripts or Modules| |
 | +-----------------------------------+ |      | +----------------------------+ |
 | | Node engine                       | |      |                                |
 | |===================================| |      | +-------------------------+    |
 | | Node modules (e.g. http, process) | |      | | 3rd party Node Packages |    |
 | +-----------------------------------+ |      | +-------------------------+    |
 |---------------------------------------|      +--------------------------------+
 | +----+ +---------+                    |
 | | v8 | | libuv   |                    |
 | +----+ | zlib    |                    |
 |        | openssl |                    |
 |        | cares   |                    |
 |        | ...     |                    |
 |        +---------+                    |
 +---------------------------------------+
}}}
* Node 的 Package Manager 。目前主要的 Package Manager 是 [[https://www.npmjs.org/|NPM]] 。

== Installation ==
* 從安裝包安裝。http://nodejs.org/download/ 下載安裝包。(注意：操作系統和 32/64 bit ) 
* 通過 binary 安裝。 http://nodejs.org/dist/ 下找到自己需要 node & npm version 。 注意:
  # 操作系統和 32/64 bit 版本在不同的目錄中。
  # 在 http://nodejs.org/dist/npm-versions.txt 中有 node 和 npm 版本的對應關係。
  # 下載後把 node 和 npm 的所在目錄加入 `PATH`  環境變量中。
* 通過 source code 安裝:
  # 從 https://github.com/joyent/node clone node 代碼
  # Checkout 自己需要的 branch 。比如: `git checkout v0.10.3-release` 代表 node v0.10.3 版本。
  # 運行 `configure --prefix=<node & npm install path>` 
  # build & install: `make` & `make install`
  # 把 prefix folder 加入 `PATH` 環境變量中。

-----

= Tips =
* 一些基本的容器, copy/clone 之类的操作<br>
 选 Lo-Dash 或 underscore。俩者类似, Lo-Dash 后出来些，更新好像更频繁些，据说性能也好一点。
 # [[https://github.com/lodash/lodash/|Lo-Dash]] -  
 Document: http://lodash.com/docs
 # [[https://github.com/jashkenas/underscore|underscore]] -  
 Document: http://underscorejs.org/

* string 操作<br>
 Node 自带的 `util` 有一部分。不过很不够用。
 目前找到的功能比较丰富的包是 
 [[https://github.com/epeli/underscore.string|underscore.string]]

* 异步操作<br>
 Async 或者 Q。自己一般使用 Async 。主要要是看实现上 Async 似乎更简单些。
 为了 KISS 原则也应该轻量级的东西。<br>
 这两者更新都不是很频繁，估计会有新的代替者出现吧?
 # Async: https://github.com/caolan/async
 # Q: https://github.com/kriskowal/q

-----

= 冷门 Modules =
== rsyncwrapper  ==
* [[https://github.com/jedrichards/rsyncwrapper|rsyncwrapper]] <br>
 - Rsync 的封装，之前自己用于网站的自动发布。<br>
 (Windows 上没有用过，估计是需要特殊配置的 ssh 和 rsync windows client 的。)
 - Sample: (具體的 options 在他的 github readme 裏有) <br>
{{{class="brush: js; gutter: false; toolbar: false;"
  var rsync, rsyncOpt;
  /* rsync options */
  rsyncOpt = {
    src: './dist/',
    dest: 'username@host:remote_directory',
    recursive: true
  };
  /* execute rsync upload */
  rsync = require("rsyncwrapper").rsync;
  rsync(rsyncOpt, function (err, stdout, stderr, cmd) {
    if (err) {
      /* XXX Rsync error */        
    }
  });
}}}

-----

= Grunt =
== Documentation ==
* http://gruntjs.com/ <br>
 也可以再 Github 上的 grunt-docs 找到 https://github.com/gruntjs/grunt-docs <br>
 至少有3部分: Plugins, Documentation, API。
 # 閱讀 Documentation 裏的 _getting started_  http://gruntjs.com/getting-started
 # 掌握基本 Task 概念
 # 掌握基本的 API (比如: Log, File, config, option ... etc.) 
 # Async Task 的使用 
 # 掌握常用的 Plugins (安裝，加載，配置）
 # 知道 plugin 的製作過程 http://gruntjs.com/creating-plugins

== Useful plugins ==
* 現有的 plugins 可以在 http://gruntjs.com/plugins 找。
* 如果是 grunt contrib plugin 也可以在 https://github.com/gruntjs search 到。
  (如果無特殊需要，最好優先選用 grunt contrib 的 plugin。)
* 如何生成自己的 plugin 可以参考, Grunt document 里的 Creating plugins 章节。
  http://gruntjs.com/creating-plugins
=== grunt-contrib-jshint ===
*  [[https://github.com/gruntjs/grunt-contrib-jshint|grunt-contrib-jshint]] <br>
 jshint 检查
 # Install: `npm install grunt-contrib-jshint --save-dev`
 # Load: `grunt.loadNpmTasks('grunt-contrib-jshint');` 
 # Sample configuration: (具體的 options 在他的 github readme 裏有) <br>
{{{class="brush: js; gutter: false; toolbar: false;"
  grunt.initConfig({
    jshint: {
      /* read the jshint option from .jshintrc  */
      options: { jshintrc: '.jshintrc' },
      /* target: { source files }  */
      gruntfile: { src: 'Gruntfile.js' },
      lib: { src: ['lib/**/*.js'] },
      bin: { src: ['test1.js', 'test2.js'] }
    }
  };
}}}
=== grunt-contrib-clean ===
* [[https://github.com/gruntjs/grunt-contrib-clean|grunt-contrib-clean]] <br>
 清理文件或目录
 # Install:  `npm install grunt-contrib-clean --save-dev`
 # Load:  `grunt.loadNpmTasks('grunt-contrib-clean');` 
 # Sample configuration: (具體的 options 在他的 github readme 裏有) <br>
{{{class="brush: js; gutter: false; toolbar: false;"
  grunt.initConfig({
    /* remove ./dist */
    clean: ['dist']
  };
}}}
=== grunt-contrib-copy ===
* [[https://github.com/gruntjs/grunt-contrib-copy|grunt-contrib-copy]] <br>
 copy 文件，目录。可以用于打包之类的
 # Install:  `npm install grunt-contrib-copy --save-dev` 
 # Load:  `grunt.loadNpmTasks('grunt-contrib-copy');` 
 # Sample configuration: (具體的 options 在他的 github readme 裏有) <br>
{{{class="brush: js; gutter: false; toolbar: false;"
  grunt.initConfig({
    /* copy all the .html files from output to dist */
    copy: {
      content: {
        expand: true,
        cwd: 'output/',
        src: [ '**/*.html' ],
        dest: 'dist/'
      }
    }
  };
}}}
=== grunt-contrib-concat ===
* [[https://github.com/gruntjs/grunt-contrib-concat|grunt-contrib-concat]] <br>
 合并 js or css files。
 # Install: `npm install grunt-contrib-concat --save-dev` 
 # Load:  `grunt.loadNpmTasks('grunt-contrib-concat');`
 # Sample configuration: (具體的 options 在他的 github readme 裏有) <br>
{{{class="brush: js; gutter: false; toolbar: false;"
  grunt.initConfig({
    concat: {
      css: { src: [ 'src1.css', 'src2.css' ], dest: 'dest.css' },
      js: { src: [ 'src1.js', 'src2.js' ], dest: 'dest.js }
    }
  };
}}}
=== grunt-contrib-cssmin === 
* [[https://github.com/gruntjs/grunt-contrib-cssmin|grunt-contrib-cssmin]] <br>
 压缩css。( 也可以考虑用 grunt-yui-compressor。提醒: 目前的 YUI 依赖 Java。）
 # Install:  `npm install grunt-contrib-cssmin --save-dev` 
 # Load:  `grunt.loadNpmTasks('grunt-contrib-cssmin');`
 # Sample configuration: (具體的 options 在他的 github readme 裏有) <br>
{{{class="brush: js; gutter: false; toolbar: false;"
  grunt.initConfig({
    cssmin: {
      minify: { src: [ 'src.css' ], dest: 'dest.css' }
    }
  };
}}}
=== grunt-contrib-uglify ===
* [[https://github.com/gruntjs/grunt-contrib-uglify|grunt-contrib-uglify]] <br>
 压缩/丑化 js。( 也可以考虑用 grunt-yui-compressor。提醒: 目前的 YUI 依赖 Java。）
 # Install:  `npm install grunt-contrib-uglify --save-dev`
 # Load:  `grunt.loadNpmTasks('grunt-contrib-uglify');`
 # Sample configuration: (具體的 options 在他的 github readme 裏有) <br>
{{{class="brush: js; gutter: false; toolbar: false;"
  grunt.initConfig({
    uglify: {
      dist: { src: 'src.js', dest: 'dest.js' }
    }
  };
}}}
=== grunt-contrib-connect ===
* [[https://github.com/gruntjs/grunt-contrib-connect|grunt-contrib-connect]] <br>
 創建一個靜態的 Web Server，一般用於自動測試或開發時本地看效果用一下。 
 # Install:  `npm install grunt-contrib-connect --save-dev`
 # Load:  `grunt.loadNpmTasks('grunt-contrib-connect');`
 # Sample configuration: (具體的 options 在他的 github readme 裏有) <br>
{{{class="brush: js; gutter: false; toolbar: false;"
  grunt.initConfig({
    connect: {
      dist: {
        options: { port: 9000, base: 'dist', debug: true, keepalive: true }
      }
    }
  };
}}}
=== grunt-contrib-watch ===
* [[https://github.com/gruntjs/grunt-contrib-watch|grunt-contrib-watch]] <br>
 監視對應的文件系統，當發生變化時自動執行對應的 Task。 
 # Install:  `npm install grunt-contrib-watch --save-dev`
 # Load:  `grunt.loadNpmTasks('grunt-contrib-watch');`
 # Sample configuration: (具體的 options 在他的 github readme 裏有) <br>
{{{class="brush: js; gutter: false; toolbar: false;"
  grunt.initConfig({
    watch: {
      /* 1. monitor the .html files in output folder
       * 2. call the 'copy:content' task if the files changed
       */
      content: {
        files: ['output/**/*.html'],
        tasks: ['copy:content'],
        options: { spawn: false }
      }
    },
 };
}}}

