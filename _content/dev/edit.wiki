%title Editors
%toc

俺作為一個實用主義的碼農: vim 作為日常工作;  emacs  + gdb 應付調試。<br>
这两种情况大概能包含我所用到的 Editor 的 9 成了吧?
(就連本 wiki 也是 Vimwiki 所構建的)

= VIM =
== Documents or Resources ==
不同於 Sublime, Notepad++ 之流的 Editor。
vim 和 emacs 在使用前，最好先閱讀一些書籍或手冊。<br>
(個人覺得相對於 emacs 的學習曲線, vim 還是簡單了很多的吧?)

=== Books ===
* <Learning the vi and Vim Editors> http://book.douban.com/subject/3767413/
* <Practical Vim> http://book.douban.com/subject/10599776/

=== Resources ===
* Online VIM wiki http://vim.wikia.com/

== My vimrc ==
正在用的 vimrc,  也沒有用到像[[https://github.com/gmarik/Vundle.vim|Vundle]] 這種插件管理(因為覺得那樣不好維護)。
* my vimrc on github https://github.com/xiongjia/dotfiles/tree/master/vim 
  - 安裝時可以通過上一级目录的 Rakefile 
  - 目前可能不能工作於 MS Windows 環境。<br>
    (主要是 Windows 可能需要手動安裝一些依賴，目前自動化沒實現。比如: 
    Grep.vim plugin 依賴 GNU Win32 的 grep; vim diff 是用的 GNU Diff 也需要額外裝;
    另外還有些 Python, nodejs 等的依賴)

== Tips ==
=== swap file ===
swap file 是 vim 用来存储你修改中的内容的一个文件。
* 查看幫助 `:help swap`  
* 查看當前的 swap file name `:swapname` 或者 `:sw`
* 關閉 swap file `:set noswapfile`; 再次啟用 swap file `:set noswapfile!` 。 <br>
  關閉 swap 會導致 vim 把改動放在內存中。此期間如果 vim crash ,會導致修改丟失。<br>
  平時應該啟用 swap, 特殊需要時可以零時關閉。
* swap file 位置:
 - 默認設置中, swap file 會和被編輯文件放在同一個目錄。並且 vim 會增加 "." 前綴和 ".swp" 後綴。<br>
   如:  `~/test.c` 的默認 swap file 是 `~/.test.c.swp`
 - 很多時候不想在工作目錄中產生臨時文件(如:在 git/svn 目錄中不希望有臨時文件被不小心提交).<br>
   有這種需求的話,可以配置 vim 讓其在固定目錄生成 swap。<br>
   如: `:set directory=$HOME/.vim/swap-files//` 此 set 會使所有 swap 文件生成到 `~/.vim/swap-files` 下，
   并以被編輯文件的 full filename 作為命名依據。
   可以將 `set directory=$HOME/.vim/swap-files//` 加入 vimrc 使其默認生效。

=== Search and replace ===
vim 中可以通過 `:substitute` 命令來查找替換。
(如果是 GUI 版本的 vim 也可以使用 `:promptrepl`,來調用 GUI 提供的 Search/Replace dialog )
* 查看幫助 `:help :substitute` , `:help :promptrepl`
* Online vim wiki: http://vim.wikia.com/wiki/Search_and_replace
* 基本使用: 
 - 如 vim document 中列出的, substitute 語法: `:[range]s[ubstitute]/{pattern}/{string}/[flags] [count]`
 - `[range]` 代表，查找替換的範圍
  # `.` 或者沒有 range ，代表當前行。如: `:s/{pattern}/{string}/[flags]`  or `:.s/{pattern}/{string}/[flags]`
  # 同理 `$` 表示最後一行.
  # `%` 代表全文即當前 buffer。`:%s/{pattern}/{string}/[flags]` 
  # 一個數字,代表範圍的具體行。如: 僅限第三行 `:3s/{pattern}/{string}/[flags]` 
  # 可以用 `,` 表示某個範圍。如: 第一行至第三行 `:1,3s/{pattern}/{string}/[flags]`
  # range 本身也可以是一個 pattern, 代表 匹配 pattern 的行。
    如: 所有 'baz' 開頭的行 `:g/^baz/s/{pattern}/{string}/[flags]`
  # 實用的組合, 比如: 
   - 當前行往下的3行:  `:.+3s/{pattern}/{string}/[flags]` (同理 `.-3` 是往上的3行)
   - 從第一行至當前行: `:0,.s/{pattern}/{string}/[flags]` (同理 `.,$` 當前行至最後行) 
  # 更多的說明，請參看 vim 手冊 `:help cmdline-ranges`
 - {pattern} 代表要替換的字符
  # 关于這個可以參看 vim 手冊 `:help pattern`. 
 - {string} 要替換成的字符串
  # 基本使用,如: `%s/123/123/gci` 把所有的 "123" 替換成 "123"
  # 如果是刪除則直接不填寫，如: `%s/123//gci` 相當于把所有的 "123" 刪除.
 - [flags] 代表替換的參數
  # 這個可以參看 vim 手冊 `:help :s_flags` 
  # 常用组合 'gci' , 比如: `%s/123/123/gci` 這裡的 'g' 代表替換所有匹配到地方, 
    'c' 代表每次替換需要用戶確認, 'i' 代表匹配时忽略大小写。

* 在多個 buffer 中做替換.
 - 可以參考 vim online wiki : http://vim.wikia.com/wiki/Search_and_replace_in_multiple_buffers
 - 基本方法是使用 `bufdo` 在多個 buffer 中執行 substitute 。
   如: `:bufdo! %s/pattern/replace/gec` <br>


=== Copy, cut and Past ===
* 基礎的 Copy, cut and past，應該是所有人都會的日常操作。可以參考：
 - Online wiki: http://vim.wikia.com/wiki/Copy,_cut_and_paste
* Command-line mode 下的 copy past ( Vim 下方輸入命令的小窗口)
 - 首先說明一下 vim 的 Command-line mode.
  * 可以參考手冊 `:help Command-line-mode` , 在 command line mode 下可以輸入 vim 命令或者 search patterns。
    輸入命令時用 `:` 進入; 輸入 search pattern  時用 `/` 。
 - Copy 內容到 command-line mode
  * 首先把要複製的內容放入 vim register。比如: 選中 content; 按 'y'。 
    這樣 選中內容就被放入了默認 register '*' 中。可以用 `:reg` 命令來確認這一點。
  * 進入 command-line-mode。 再按  `CTL + r`; `*` 。
    表示將 '*' register 中的內容複製到 command line 
 - 反之從 command-line mode 中的內容 copy 到 buffer 
  * 基本時利用 command-line-window 來做的 `:help command-line-window`,
    在 command-line-window 中可以像普通 buffer 一樣操作。
  * `q:` 或者 `q/` 可以進入 command-line-window。前者是用來進入執行命令的 command,
   後者是進入 search 的 command。之後和普通 buffer 一樣操作就可以了。

