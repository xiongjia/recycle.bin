%title Tips
%toc

= scp =
secure copy (remote file copy program) 
* 日常操作:
 - source 放在前面，target 放在后面。
 - `-r` - (Recursively) 表示递归 srouce。
 
 | Upload file     | `scp SourceFile user@host:directory/TargetFile`        |
 | Upload folder   | `scp -r SourceFolder user@host:directory/TargetFolder` |
 | Download file   | `scp user@host:directory/SourceFile TargetFile`        |
 | Download folder | `scp -r user@host:directory/SourceFolder TargetFolder` |

* Windows 上的選擇:<br>
 - [[http://www.chiark.greenend.org.uk/~sgtatham/putty/|Putty]] 提供了  Windows 版 SSH client 的实现。`pscp.exe` 可以实现与 scp 一样的功能。
 - 安装 Cygwin or Mingw 并选上对应的 ssh 组件。
* Auto login <br>
 有时會把 scp 写在 script 里自动执行。不希望每次输入口令。多種解決辦法:
 - 使用 ssh 证书认证。 在 scp 命令里加入 `-i 'private key file'` (应该是最佳选择)
 - 使用 sshpass 如:
 `sshpass -p "password" scp -r user@host:directory/SourceFolder TargetFolder` <br>
 缺点很多：1.需要把 password 写在脚本里 2. 不是所有平台都有 sshpass, 比如：osx 上目前版本的 brew 便无法安装 sshpass。
 - 通过 Expect 自动登录。Expect 是一个经典的 Unix Shell automation tool。<br>
   如果系統是 Unix (e.g. Linux, OS X) 又不想使用证书登录方式,系统又不能使用 sshpass (比如: OS X)。
   可以考虑用这种方式。举例来说可以创建一下 `scp_auto.sh` 以达到自动上传的目的。 <br>
   简单说明一下，下面的脚本:
   - `spawn scp "user@host:directory/SourceFile" TargetFile` 根据需要创建一个 scp process
   - `-re ".*sword.*"` 表示匹配到屏幕上出现 "Password:" 之类的输入提示，
     这是用 exp_send 把你的 password 加\r 发送到屏幕去。
   - `-re ".*es.*o.*"` 表示匹配到 "YES or NO" 之类的提示时，自动输入 yes。
{{{class="brush: shell; gutter: false; toolbar: false;"
    #!/usr/bin/expect -f
    
    # connect via scp
    spawn  scp "user@host:directory/SourceFile" TargetFile
    #######################
    expect {
      -re ".*es.*o.*" {
        exp_send "yes\r"
        exp_continue
      }
      -re ".*sword.*" {
        exp_send "Your PASSWORD\r"
      }
    }
}}}

-----

= Rsync =
增量同步工具
* 日常操作:<br>
 `rsync -e "/usr/bin/ssh"  --bwlimit=2000 -av local_dir user@host:remote_dir`<br>
 # local_directory - 本地同步的目录。 <br>
 如果以 '/' 结尾表示同步此目录下的。不加则会上传这个目录。例如:<br>
 './dist/' - 表示同步 dist 目录下<br>
 'dist' - 会吧 'dist' 这级也传上去。
 # --bwlimit=KBPS - 带宽限制
* NODE 中使用 Rsync - 参考 [[node|NODE]] 中的 _rsyncwrapper_

-----

= GIT =
The stupid content tracker 
* Pro GIT (文档)
 - 下載的github: https://github.com/progit/progit
 - online book en: http://git-scm.com/book/en/
 - online book 中文簡體: http://git-scm.com/book/zh
* GIT internals (文档)
 - 內容比 Pro GIT 簡潔一些
 - 下載的github: https://github.com/pluralsight/git-internals-pdf
* 備忘(有時自己會忘記的 commands ): 
 - 刪除 remote branch <br>
   `git push origin --delete <branchName>`
 - 清除本地無效的 remote branch <br>
   `git remote prune origin`

-----

= Jekyll =
Jekyll http://jekyllrb.com/ 是一個 Ruby 實現的靜態站點生成工具。
* Setup environment <br>
 代碼可以從 https://github.com/jekyll/jekyll 上找到。<br>
 配置和安裝可以參考: http://jekyllbootstrap.com/ or https://github.com/plusjade/jekyll-bootstrap
* 字符集問題<br>
 在 Windows + Ruby 的環境下，如果對應的 post 裏有中文的話可能會造成
 ` jekyll server` 不能正常啓動。<br>
 目前的 workaround 是設置 *RUBYOPT* 環境變量增加 _-Ku_ 的 option 。
 比如:<br>
 Windows console: `set RUBYOPT=-Ku` , Windows Powershell: `$env:RUBYOPT="-Ku"` <br>
 Unix ( Unix 上應該不需要,從來沒有在 Linux 或 os x 上遇到過這個問題): `export RUBYOPT=-Ku` <br>
* 日常使用
 - create new post <br>
   對應的 rake task 是 `rake post title="Hello World"` 
 - launch server <br>
   `jekyll server [--watch] [--draft]`。<br>
   _--draft_ 會把 draft 目錄下的 post 也生成靜態網頁。<br>
   _--watch_ 會監視 post 的改動並自動更新到網站。
 
