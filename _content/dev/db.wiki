%title Database
%toc

= PostgreSQL =
== Documentation ==
* 在線手冊: http://www.postgresql.org/docs/ 
* 本地手册,在安装 Database server 時會附帶有使用手冊. 具體位置各操作系統會有區別。
  (比如: osx 用 Homebew 裝的 version 9.3.2, 在 `/usr/local/Cellar/postgresql/9.3.2/share/doc/postgresql/html`,
  下可以找到; Windows 上則可以在安裝目錄的下找 `doc\postgresql\html` )

== 日常操作 ==
=== 創建數據庫 ===
* initdb <br>
  - 創建 database cluster . database cluster 是 postgres 的 instance。
  有 2 種方式創建: `initdb` 或者 `pg_ctl` 的 init 操作。
  比如用 `initdb` 來創建: <br>
  `initdb -D <data dir> -U <superuser name> -W` <br>
   * -D 用來指定 database 數據文件位置
   * -U 用來指定管理員帳戶
   * -W 表示創建過程中詢問管理員的 password 
  - 創建完後，默認會有 3 個 databases。 
    2 個互為備份的 template  database: template0; template1。另一個為默認 database: postgres。
* 啟動/停止 database cluster <br>
  可以通過 `pg_ctl` 的 start/stop 操作來啟動或停止一個 database cluster。
  - 啟動: `pg_ctl -D <data dir> -l <log file name> start` 
  - 停止: `pg_ctl -D <data dir> stop` <br>
    停止 database 時有 3 種 modes: "smart", "fast", or "immediate" <br>
    * 用 -m 參數指定 shutdown mode, 默認的 shutdown mode 為 smart.
    * 3 種 shutdown mode 會影響正在工作的 client, 正在處理的事務以及正在進行的備份。
      手冊種的描述: <br>
      Three different shutdown methods can be selected with the -m option. 
      "Smart" mode (the default) waits for all active clients to disconnect and any online backup to finish.
      If the server is in hot standby, recovery and streaming replication will be terminated once all clients have disconnected. 
      "Fast" mode does not wait for clients to disconnect and will terminate an online backup in progress. 
      All active transactions are rolled back and clients are forcibly disconnected, 
      then the server is shut down. "Immediate" mode will abort all server processes immediately, 
      without a clean shutdown. This will lead to a crash-recovery run on the next restart.
* 創建 database <br>
  創建一個 database 實際上就是把 template database 複製一份，
  改名成用戶 database 並更新相關數據到 postgres 的系統表。<br>
  如果有需要用戶是可以指定自己的 template database 的, 用 `-T` 參數告訴 `createdb` 模板名。
  默認不指定 `createdb` 會用系統的 template1/template0 來做模板。<br>
  比如 (注意創建 database 前, database cluster 必須已啟動): <br>
  `createdb -U <superuser name> <database name> [database description]`
  - -U 是管理員帳號
  - database name 是新建的 database 名字
  - database description 可選，是數據庫的描述。
* 查看 databases <br>
  database cluster 啟動後可以用 `psql` 默認的 postgres client 去查看。(也可以用 GUI 工具 pgAdmin )
  比如: `psql -U <username> <database name>` .進入 `psql` 後可用 `\l` 命令，來列出所有 database. 
* 刪除 database <br>
  - 可以用 `DROP DATABASE` SQL 操作,來刪除數據庫.比如: `DROP DATABASE IF EXISTS <database name>;`
  - 注意:不能刪除當前登錄數據庫; 如果有其他 client 正在使用該 database 則該操作會失敗.
=== schemas; roles/users and others ===
==== schemas ====
- 創建 schema, 用 SQL 來操作: `CREATE SCHEMA IF NOT EXISTS <schema name>;` <br>
  (注意: 所有 "pg_" 開頭的 schema 都是別系統保留的 schema 。)
- 刪除 schema, 用 SQL 來操作: `DROP SCHEMA IF EXISTS  <schema name> CASCADE;` <br>
- 查詢 database 的 Schemas, 用 `psql` 命令 `\dn+` 來操作。<br>
  (注意: 如果需要查詢 postgres 系統 schema ( "pg_" 開頭的那些 schema ) 可以用 `\dnS+` 來查看)
- {panding} update user search path;
==== roles/users ====
- 創建數據庫用戶 <br>
  可以用 SQL `CREATE ROLE` 或者 `CREATE USER` 來操作。
  (CREATE USER is now an alias for CREATE ROLE). <br>
  比如: `CREATE ROLE <user name> WITH PASSWORD '<password>';`
- 授權 <br>
  可以用 SQL `GRANT` 來操作. 對不同的 object 授權要用不同的 `GRANT` 參數.<br>
  對 database 授權:<br>
  `GRANT ALL PRIVILEGES ON DATABASE <database name> TO <role/user name>`   
  ( ALL PRIVILEGES = "CREATE, CONNECT, TEMPORARY, TEMP" ) <br>
  授權后用 `psql` 的 `\l` 操作便可以看到 databases 和 role 權限的關聯。比如:
{{{
testdb=# \l testdb
                                            List of databases
  Name  | Owner | Encoding |          Collate           |           Ctype            | Access privileges
--------+-------+----------+----------------------------+----------------------------+-------------------
 testdb | root  | WIN1252  | English_United States.1252 | English_United States.1252 | =Tc/root         +
        |       |          |                            |                            | root=CTc/root    +
        |       |          |                            |                            | user1=CTc/root
(1 row)
}}}
   這裡在 'testdb' 這個 database 裏用 `\l testdb` 查看 'testdb' 的具體信息。<br>
   可以從 "Access privileges" 看到 database 與 user 之間的關聯。<br>
   比如: "root=CTc/root" 表示 root 用戶的權限等於 "CTc", 這個權限是由 root 用戶 GRANT 的。
   "CTc" 是 postgres 的權限縮寫.參看下表
{{{
rolename=xxxx -- privileges granted to a role
        =xxxx -- privileges granted to PUBLIC

            r -- SELECT ("read")
            w -- UPDATE ("write")
            a -- INSERT ("append")
            d -- DELETE
            D -- TRUNCATE
            x -- REFERENCES
            t -- TRIGGER
            X -- EXECUTE
            U -- USAGE
            C -- CREATE
            c -- CONNECT
            T -- TEMPORARY
      arwdDxt -- ALL PRIVILEGES (for tables, varies for other objects)
            * -- grant option for preceding privilege

        /yyyy -- role that granted this privilege
}}}
  對指定 Schema 下的 Tables 授權: <br>
  `GRANT ALL PRIVILEGES ON ALL TABLES IN SCHEMA <schema> to <user name>;`
  ( ALL PRIVILEGES = SELECT, INSERT, UPDATE, DELETE, TRUNCATE, REFERENCES, TRIGGER;
    ALL TABLES = 該 Schema 下所有 Tables )<br>
  授權后用 `psql` 的 `\z <schema>.<table name>` 操作查相應的 "Access privileges". 
  (和查看 database 權限相同) <br><br>
  還有很多其他 objects 的 GRANT 就不列舉了,可以參考手冊中 `GRANT` 的説明。
  下面是自己常用的開發帳戶授權,用於生産環境可能不夠安全:
{{{
    GRANT ALL PRIVILEGES ON DATABASE <database name> to <user name>;
    GRANT ALL PRIVILEGES ON SCHEMA <schema name> TO <user name>;
    GRANT ALL PRIVILEGES ON ALL TABLES IN SCHEMA <schema name> TO <user name>;
    GRANT ALL PRIVILEGES ON ALL SEQUENCES IN SCHEMA <schema name> TO <user name>;
    GRANT ALL PRIVILEGES ON ALL FUNCTIONS IN SCHEMA <schema name> TO <user name>;
}}}

- 撤銷授權
 {panding} REVOKE 

