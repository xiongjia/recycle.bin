%title Database
%toc

= PostgreSQL =
== Documentation ==
* 在線手冊: http://www.postgresql.org/docs/ 
* 本地手册,在安装 Database server 時會附帶有使用手冊. 具體位置各操作系統會有區別。
  (比如: osx 用 Homebew 裝的 version 9.3.2, 在 `/usr/local/Cellar/postgresql/9.3.2/share/doc/postgresql/html`,
  下可以找到; Windows 上則可以在安裝目錄的下找 `doc\postgresql\html` )

== 日常工作 ==
=== database cluster ===
* initdb <br>
  - 創建 database cluster . database cluster 是 PostgreSQL 的 instance。
  有 2 種方式創建: `initdb` 或者 `pg_ctl` 的 init 操作。
  比如用 `initdb` 來創建: <br>
  `initdb -D <data dir> -U <superuser name> -E <ENCODING e.g.: utf8> --locale=<locale e.g. "C"> -W` <br>
   * -D 用來指定 database 數據文件位置
   * -U 用來指定管理員帳戶
   * -E 用來指定以後創建 Database 的默認字符集,
       可以寫成 utf8 以支持 unicode 也可以選擇其它參考手冊中 "Character Set Support" 章節.
   * --locale 以後數據庫的 default locale (默認地區). 比如美國是 "en_US". 
     可以設置成 "C" 表示使用 standard ISO C.
   * -W 表示創建過程中詢問管理員的 password 
  - 創建完後，默認會有 3 個 databases。 
    2 個互為備份的 template  database: template0; template1。另一個為默認 database: postgres。
* 啟動/停止 database cluster <br>
  可以通過 `pg_ctl` 的 start/stop 操作來啟動或停止一個 database cluster。
  - 啟動: `pg_ctl -D <data dir> -l <log file name> start` 
  - 停止: `pg_ctl -D <data dir> stop` <br>
    停止 database 時有 3 種 modes: "smart", "fast", or "immediate" <br>
    * 用 -m 參數指定 shutdown mode, 默認的 shutdown mode 為 smart.
    * 3 種 shutdown mode 會影響正在工作的 client, 正在處理的事務以及正在進行的備份。
      手冊種的描述: <br>
      Three different shutdown methods can be selected with the -m option. 
      "Smart" mode (the default) waits for all active clients to disconnect and any online backup to finish.
      If the server is in hot standby, recovery and streaming replication will be terminated once all clients have disconnected. 
      "Fast" mode does not wait for clients to disconnect and will terminate an online backup in progress. 
      All active transactions are rolled back and clients are forcibly disconnected, 
      then the server is shut down. "Immediate" mode will abort all server processes immediately, 
      without a clean shutdown. This will lead to a crash-recovery run on the next restart.
=== database ===
* 創建 database <br>
  創建一個 database 實際上就是把 template database 複製一份，
  改名成用戶 database 並更新相關數據到 PostgreSQL 的系統表。<br>
  如果有需要用戶是可以指定自己的 template database 的, 用 `-T` 參數告訴 `createdb` 模板名。
  默認不指定 `createdb` 會用系統的 template1/template0 來做模板。<br>
  比如 (注意創建 database 前, database cluster 必須已啟動): <br>
  `createdb -U <superuser name> <database name> [database description]`
  - -U 是管理員帳號
  - database name 是新建的 database 名字
  - database description 可選，是數據庫的描述。
  - 新建的 database 的 Character Set 和 locale 設置是 initdb 時默認的. (是從 template0 繼承得來)
    如果有不同需要可以用 `-E`  和 `--locale` 更改,具體看手冊.
* 查看 databases <br>
  database cluster 啟動後可以用 `psql` 默認的 PostgreSQL client 去查看。(也可以用 GUI 工具 pgAdmin )
  比如: `psql -U <username> <database name>` .進入 `psql` 後可用 `\l` 命令，來列出所有 database. 
* 刪除 database <br>
  - 可以用 `DROP DATABASE` SQL 操作,來刪除數據庫.比如: `DROP DATABASE IF EXISTS <database name>;`
  - 注意:不能刪除當前登錄數據庫; 如果有其他 client 正在使用該 database 則該操作會失敗.
=== schemas ===
- 創建 schema, 用 SQL 來操作: `CREATE SCHEMA IF NOT EXISTS <schema name>;` <br>
  (注意: 所有 "pg_" 開頭的 schema 都是別系統保留的 schema 。)
- 刪除 schema, 用 SQL 來操作: `DROP SCHEMA IF EXISTS  <schema name> CASCADE;`.
  CASCADE 表示同時刪除所有 Schema 下的 objects (比如: tables, functions, etc) <br>
- 查詢 database 的 Schemas, 用 `psql` 命令 `\dn+` 來操作。<br>
  (注意: 如果需要查詢 PostgreSQL 系統 schema ( "pg_" 開頭的那些 schema ) 可以用 `\dnS+` 來查看)
- search_path <br>
  search_path 是一個 PostgreSQL client 連接時的 Configuration. 
  它決定了 PostgreSQL 在搜索 Object 時 schemas 的先後順序. <br>
  手冊中的描述: This variable specifies the order in which schemas are searched when an object 
  (table, data type, function, etc.) is referenced by a simple name with no schema specified.<br>
  比如: 有 2 個 schemas - SCHEAM1, SCHEAM2 . 有 2 個同名的 tables - SCHEAM1.TEST_TAB, SCHEAM2.TEST_TAB.<br>
  這時做 "SELECT * from TEST_TAB;" 操作.PostgreSQL 就需要搜索 SCHEAM1 和 SCHEAM2 來找到 TEST_TAB, 
  如果 SCHEAM1 在前則結果會是 SCHEAM1.TEST_TAB , 反之則是 SCHEAM2.TEST_TAB .
  - 查詢當前的 search_path: <br>
    運行 `show search_path`, 可以得到當前的 search_path. <br>
    默認值為 `"$user", public` 表示于用戶名相同的 schema 和 public schema.
    多個 schemas 使用逗號分隔的.
  - 修改當前 search_path: <br>
    `SET search_path <scheam1> [, <scheam2>, ...];` . 
    SET 只對當前 Connection 進行修改, 不會影響下一次的連接.
  - 修改 用戶的 Default search_path: <br>
    `ALTER USER <user name> SET search_path= <scheam1> [, <scheam2>, ...];` . 
    改變用戶的默認 search_path 后,會在下一次用戶連接時生效.
=== roles/users ===
- 創建數據庫用戶 <br>
  可以用 SQL `CREATE ROLE` 或者 `CREATE USER` 來操作。
  (CREATE USER is now an alias for CREATE ROLE). <br>
  比如: `CREATE ROLE <user name> WITH PASSWORD '<password>';`
- 授權 <br>
  可以用 SQL `GRANT` 來操作. 對不同的 object 授權要用不同的 `GRANT` 參數.<br>
  對 database 授權:<br>
  `GRANT ALL PRIVILEGES ON DATABASE <database name> TO <role/user name>`   
  ( ALL PRIVILEGES = "CREATE, CONNECT, TEMPORARY, TEMP" ) <br>
  授權后用 `psql` 的 `\l` 操作便可以看到 databases 和 role 權限的關聯。比如:
{{{
testdb=# \l testdb
                                            List of databases
  Name  | Owner | Encoding | Collate | Ctype | Access privileges
--------+-------+----------+---------+-------+-------------------
 testdb | root  | UTF8     | C       | C     | =Tc/root         +
        |       |          |         |       | root=CTc/root    +
        |       |          |         |       | user1=CTc/root
(1 row)
}}}
   這裡在 'testdb' 這個 database 裏用 `\l testdb` 查看 'testdb' 的具體信息。<br>
   可以從 "Access privileges" 看到 database 與 user 之間的關聯。<br>
   比如: "root=CTc/root" 表示 root 用戶的權限等於 "CTc", 這個權限是由 root 用戶 GRANT 的。
   "CTc" 是 PostgreSQL 的權限縮寫.參看下表
{{{
rolename=xxxx -- privileges granted to a role
        =xxxx -- privileges granted to PUBLIC

            r -- SELECT ("read")
            w -- UPDATE ("write")
            a -- INSERT ("append")
            d -- DELETE
            D -- TRUNCATE
            x -- REFERENCES
            t -- TRIGGER
            X -- EXECUTE
            U -- USAGE
            C -- CREATE
            c -- CONNECT
            T -- TEMPORARY
      arwdDxt -- ALL PRIVILEGES (for tables, varies for other objects)
            * -- grant option for preceding privilege

        /yyyy -- role that granted this privilege
}}}
  對指定 Schema 下的 Tables 授權: <br>
  `GRANT ALL PRIVILEGES ON ALL TABLES IN SCHEMA <schema> to <user name>;`
  ( ALL PRIVILEGES = SELECT, INSERT, UPDATE, DELETE, TRUNCATE, REFERENCES, TRIGGER;
    ALL TABLES = 該 Schema 下所有 Tables )<br>
  授權后用 `psql` 的 `\z <schema>.<table name>` 操作來查相應的 "Access privileges". 
  (和查看 database 權限相同) <br><br>
  還有很多其他 objects 的 GRANT 就不列舉了,可以參考手冊中 `GRANT` 的説明。
  下面是自己常用的開發帳戶授權,用於生産環境可能不夠安全:
{{{
    GRANT ALL PRIVILEGES ON DATABASE <database name> to <user name>;
    GRANT ALL PRIVILEGES ON SCHEMA <schema name> TO <user name>;
    GRANT ALL PRIVILEGES ON ALL TABLES IN SCHEMA <schema name> TO <user name>;
    GRANT ALL PRIVILEGES ON ALL SEQUENCES IN SCHEMA <schema name> TO <user name>;
    GRANT ALL PRIVILEGES ON ALL FUNCTIONS IN SCHEMA <schema name> TO <user name>;
}}}
- 撤銷授權 <br>
  用 `REVOKE` 操作撤銷授權.比如 REVOKE database 的授權: <br>
  `REVOKE ALL PRIVILEGES  ON DATABASE <database name> FROM <user name> CASCADE;` <br>
  ( 其它 objects 的 REVOKE 參數參看手冊 )
- 刪除用戶 <br>
  可以用 `DROP ROLE` 或 `DROP USER` 操作刪除一個 user. (DROP USER is now an alias for DROP ROLE.)
  - 在 `DROP ROLE` 之前必須先處理 user 關聯的數據。有兩种選擇: 
    * 將這個用戶的 data 分配給另一個新用戶 <br>
    `REASSIGN OWNED BY <old_roles> TO <new_role>;`
    * 刪除用戶關聯的數據 <br>
    `DROP OWNED BY <user names> CASCADE;`
  - 處理完 user 關聯的數據后可以用 `DROP ROLE IF EXISTS <user names>;` 來刪除 user/role.

== 其它 ==
=== 查看當前連接狀態 ===
查看當前 PostgreSQL 的 activity.  當前連接數和具體連接的狀態.<br>
可以通過 PostgreSQL view `pg_stat_activity` 來查看. 
比如用下面的 SQL 查看所有對 'postgres' database 的操作狀態.
{{{
postgres=# SELECT application_name, datname, pid, client_addr, client_port, waiting, state FROM pg_stat_activity where datname='postgres';
   application_name    | datname  | pid  | client_addr | client_port | waiting | state
-----------------------+----------+------+-------------+-------------+---------+--------
 pgAdmin III - Browser | postgres | 1528 | 127.0.0.1   |        2037 | f       | idle
 psql                  | postgres | 2180 | 127.0.0.1   |        2045 | f       | active
(2 rows)
}}}
  從 results 中可以看出,目前有 2 個連接在操作  'postgres' database, 一個是 pgAdmin 另一個是 psql.
  - datname: 在操作的 database name
  - pid: PostgreSQL Backend 分配對應于該連接的 Process ID. 
    如果只需要知道當前連接的 Backend Process ID 可以直接用 function `pg_backend_pid();` 來得到.
    比如: `SELECT pg_backend_pid();` 
  - client_addr; client_port: 訪問者地址和端口.
  - waiting: True/False 表示 backend 是否等在某個 lock 上.
  - state: 當前 backend 的狀態.
  - 還有更多 Columns 的意義,可以參考手冊中對 `pg_stat_activity` 的説明.(在 "Monitoring Database Activity" 章節中)
=== 終止指定的連接 ===
停止某個 database 連接可以用 `pg_terminate_backend(pid int)` 
或 `pg_cancel_backend(pid int)` 來停止對應的 database backend process. 
在這個 backend process 停止后對應的連接會被終止, client 也會收到相應錯誤.
 - `pg_terminate_backend(pid)` 與 `pg_cancel_backend(pid int)`  
   區別在於會發送不同的 signal 給 backend process (SIGINT or SIGTERM)
 - 通過 `pg_stat_activity` 可以找到對應的, backend process id 即 `pg_stat_activity.pid`
 - 用 `SELECT pg_terminate_backend(<pid>)` 來終止該 backend process (需要管理員權限)
 - 一些常用的例子:
  * 停止除當前連接外所有 pgAdmin client 發起的連接<br>
{{{ 
SELECT pg_terminate_backend(pg_stat_activity.pid) 
        FROM pg_stat_activity 
        WHERE pg_stat_activity.pid <> pg_backend_pid() AND 
              pg_stat_activity.application_name LIKE '%pgAdmin%';
}}}
  * 停止除當前連接外所有對 postgres database 的連接<br>
{{{ 
SELECT pg_terminate_backend(pg_stat_activity.pid) 
        FROM pg_stat_activity 
        WHERE pg_stat_activity.pid <> pg_backend_pid() AND 
              pg_stat_activity.datname = 'postgres';
}}}

