%title Scratch
%toc

日常的一些草稿，代碼片段。
 * 基本上把代碼共享在了我的 gist 上: https://gist.github.com/xiongjia
 * 如果是需要編譯的，一般會寫一個 CMakeLists.txt ; clone 下來後可以用 cmake 直接編譯

= Python =
== Fanfou API Test ==
 * 我在寫這個測試時，是為了後一步自己的一個 Fanfou client 做一些試驗/準備的工作。
   為了減少依賴，沒有用任何 3rd party 庫。只用了 Built-in 的 python package。 Oauth 也是自己實現的。
   - gist: https://gist.github.com/xiongjia/b8893dc5eb5bbb04cfbc
   - 目前根據 Fanfaou document 實現了 OAuth ( https://github.com/FanfouAPI/FanFouAPIDoc/wiki ) 
   - 實現了一個 home timeline status 的 api 。可以列出 TL 最近的更新。
   - 使用時需要先配置 fanfou.cfg ，格式參考 gist 中的 fanfou.sample.cfg
     (注意: consumer_key & consumer_secret 請自己申請, 參考文檔: https://github.com/FanfouAPI/FanFouAPIDoc/wiki/Oauth )
   - gist 裡有一個 +README.md 裏面記錄了一些可參考信息。

= Java =
這些 Java Scratch 代碼,都是用 Gradle 做管理。
== WebSocket Echo server ==
一個簡單 Echo Server。主要目的是測試/實驗 [[https://github.com/TooTallNate/Java-WebSocket|Java WebSocket]] 
 * 代碼: https://github.com/xiongjia/scratch/tree/master/jwebsocket
 * 使用和 Gradle Tasks 參考 Git 中的 Readme 
== JMeter Example Sampler ==
[[https://jmeter.apache.org/|JMeter]] 是 Apache 的一個 Web 壓力測試工具。
用戶可以通過自己的 .jar 包為 JMeter 寫擴展。
 * 代碼: https://github.com/xiongjia/scratch/tree/master/jmeter-example-sampler
 * 使用和 Gradle Tasks 參考 Git 中的 Readme 
 * 這個代碼總體和 JMeter 的 Example  是類似的。主要是用 Gradle building 更方便點。
 
= Boost =
Boost 的 sample 都寫了一個 CMakeList.txt, clone 後應該可以直接編譯。
 * Windows 平台需要注意，為了減少依賴, CMake 中指定的都是 static runtime link。(其他 OS 應該沒有這些問題)
   所以編譯 boost 時要用 b2 link=static runtime-link=static。<br>
   (目前測試過的Windows 開發環境: MS VS 2013 + Boost 1.56) 
== Serialization ==
Boost.Serialization 可把 Memory 中的 Class 存放根據需要存入文件中，再根據需要讀回 Memory.
 * 一個簡單的 Serialization 使用
  - gist: https://gist.github.com/xiongjia/c6689d8ef1db4b8e19b5
  - 主要功能: 把 srcData 存入文件 mydata.dat 中，再把這個文件讀入 destData 中。
  - Boost 在編譯時可能沒有 build Serialization 。 
    (可以看一下 stage 目錄下有沒有 libboost_serialization* 來確認有沒有編譯 Serialization。)<br>
    如果沒有則可以用 
    `b2 link=static runtime-link=static --with-serialization --build-type=complete` 
    來 build Serialization 。
  - Boost Serialization 可以通過 BOOST_CLASS_VERSION 定義 version 。
    在做數據兼容性時可以用此 Version 來做判斷。
  - Boost Serialization 支持幾種輸出格式。 
    Gist sample 中用的是 Text 文件，也可以用 Binary, XML  等。
  - Boost 1.55 以及下版本的 Serialization 在 MS VS 2013 編譯時會出現編譯錯誤。建議升級到 1.56+。
== Pool ==
Boost Memory Pool。用來做內存管理，可以把內存的分配與釋放變得更加方便和高效。也有利於減少 Memory leak。
 * 一個簡單的 Pool 使用。
  - gist: https://gist.github.com/xiongjia/5c222ad60e7a4bb2d0f3
  - TestAllocator 是一個自定義的 Allocator 。這一個 Allocator 是可選的，
    主要是為了 Log 一下 Malloc/Free 的次數才特意加的。普通情況可以用 Boost 自己的 Default Allocator。
== Log ==
Boost.Log 是 1.54 以後被加入的 Boost Logging library。 
 * 一個簡單的 Log 使用。
  - gist: https://gist.github.com/xiongjia/e23b9572d3fc3d677e3d
  - 主要功能: customize formatter, filter + FS & Console sink + Name scope
  - 可以先從 Boost Document 看一下 Boost.Log 的介紹，了解一下基本的 Sink, formatter 等。
  - Build 時需要檢查 Boost 是否高於 1.54
== property_tree ==
property_tree 有很多作用，可以解析各種類型的格式的輸入，比如: xml, json, ini 等。
 * 一個簡單的 .ini 讀取, 解析。
  - gist: https://gist.github.com/xiongjia/6045153
  - 代碼上需要注意的就是 utf8 的處理: 用到了 `std::wifstream`;`std::wstring` 等。
  - 默認讀取當前目錄的 test.ini ,可以通過 -f 指定對應的 .ini 文件
  - CMake 中需要注意的是,增加了基本的Boost 外還增加了`program_options` 。
    只是因為用到了`boost::program_options::detail::utf8_codecvt_facet()`。
  - UTF8 string 在 terminate 的輸出，各個平台處理有點不一樣，
    - 在 OSX 上直接使用了 `wstring_convert`。我測試中這個方式好像只有 OSX 上的 gcc/clang 才工作。 
      (可能是和 locale/lang 設置有一定關聯)
    - 其他平台需要設置對正確的 locale 才能輸出，比如要輸出中文，則要把 locale 更新到 zh-CN。
      這個 example 會讀取 -l 參數來自動更新語言集。比如: `read-ini -l zh-CN` 表示以中文輸出。
== program_options ==
program_options 是一個專爲程序读取配置、参数准备的。
 * 一個簡單得從 argv 读取參數的 sample:
  - gist: https://gist.github.com/xiongjia/11399415
  - 基本的 usage 参考注解。
  - 比较复杂的时 std::vector<std::string> 的数组情况，需要告诉 boost 怎么解析。
    这里用的是 multitoken() 
== unit test framework ==
unit_test_framework 是 boost 自帶的一套 c/c++ unit test framework.
* 一個簡單的 cmake 和 boost unit test framework 配合的例子。
  - gist:  https://gist.github.com/xiongjia/72f3734f0e60a4d2a681
  - 把單元測試實現在 "0_my_lib_test.cxx" ( 加一個 “0_" prefix 是為了讓他在 gist 中居於 top
  - 對應 CMakeList.txt 會把要測試的 my_lib.cxx build 成為一個 static library 供單元測試使用
  - 對應的單元測試會被 build 成一個可執行文件。
  - 最後只需要執行對應的文件，就可以得到單元測試結果。
  - 詳細的 Boost test framework 參見 boost 文檔: http://www.boost.org/doc/libs/ ("Test" 章節)

= Database =
== SQL Joins ==
一個簡單的測試,比較 SQL 各種 
Joins (INNER; LEFT; RIGHT; OUTER; LEFT EXCLUDING; RIGHT EXCLUDING; OUTER EXCLUDING) 的結果。
 * gist: https://gist.github.com/xiongjia/0ec64d74074d517b401c
 * 這個測試參考了 http://www.codeproject.com/Articles/33052/Visual-Representation-of-SQL-Joins
 * 用 SQLite 做本地測試。
 * SQLite 只實現了部分 Join Clauses , 所以只有部分可以使用。具體參考 gist 中的註釋。
== leetcode DB problems ==
[[https://leetcode.com|leetcode]] 上的 Database 題目，和我目前的解法。
 * gist: https://gist.github.com/xiongjia/5a1fbd473e7f5966c6ad
 * 一個 file 對應于 leetcode 上的一個 problem。
 * 本地用 SQLite 建立，測試環境。
 * 註釋中有 leetcode 問題説明和我的解法。

= Shell =
== leetcode SH problems ==
[[https://leetcode.com|leetcode]] 上的 SHELL 題目，和我目前的解法。
 * 寫在了我的 github page 裏: http://xiongjia.github.io/dev/2015/06/23/shell-problems/

= Node.js =
== Dump node v8 heap ==
通過 node-heapdump 來 dump 當前得 v8 狀態，隨後可以通過 Chrome developer tool 來檢測這個 dump 文件。
 * gist: https://gist.github.com/xiongjia/7688374
 * 需要在用前裝 node-heapdump: `npm install node-heapdump`
== node stream ==
通過從 require('stream').Transform 繼承得方式實現，stream 式樣得協議解析。
 * gist: https://gist.github.com/xiongjia/6867670
 * protocol 得格式和一些注意事項已經被寫在代碼註解裏了。
== Mock Server ==
一個 HTTP Server 可以按照指定的要求來返回測試數據。
主要用來模擬測試環境，比如 HTTP 的 client 代碼的單元測試中使用。
還可以用在學習一些壓力測試工具時當作 Target Server，比如: Apache Ab, JMeter 等。
 * gist: https://gist.github.com/xiongjia/428402521312456ceccf
 * +README.md 中有具体的說明。
 * 啟動時用 `--cluster` 會使用 Node 的 Cluster 來創建多個工作進程。
   可以使得 Server 有更加高的并發處理能力。
 * "/get-data" 測試，比如: http://localhost:2333/get-data?len=2048&delay=500
   表示 Server 延迟 500 毫秒返回 2048 bytes 的数据。
== Knex sample ==
Knex 是一個 database query builder 通過 Knex 的封裝，可以使同一份代碼工作與不同種類的數據庫。
 * gist:  https://gist.github.com/xiongjia/85df587ce3535d1c6151
 * 具體參考 gist 中的 readme
== Bookshelfjs sample ==
Bookshelfjs 是一個 JS 實現的 ORM 。風格類似與 Backbone ，基於 Knex 的query builder 。
 * gist: https://gist.github.com/xiongjia/eeaf9d0d7571b4d15f3f
 * 具體參考 gist 中的 readme
== NContext ==
利用 node.js 的 'vm' module 為 script 創建一個獨特的 context
 * gist: https://gist.github.com/xiongjia/b70406b710b3c19573f6

= PowerShell =
== MS UIAutomation ==
一個簡單得 powershell script, 通過 .Net 接口調用 MS UI Automation 來操作啟動得 calc.exe
 * gist: https://gist.github.com/xiongjia/6749035
 * 這個 script 我只在 Windows 7 上測試過。

= VIM =
== VIM plugin with python ==
一個簡單的 vim plugin, 通過 python 忘當前 vim buffer 增加一些字符串。
主要是為了嘗試 vim 和 python 的交互性。
 * gist: https://gist.github.com/xiongjia/64e1353afb9415e85479
 * 手動加載的方法: copy  my_vim_plugin.py 和 my_vim_plugin.vim 到同一個目錄; 
   用 vim 打開 my_vim_plugin.vim; 執行 `so %`
 * 這裡要求 vim 提供 python runtime，這個和 vim 的編譯參數有關。
   大多的 vim 應都有 python runtime 支持。(我用過的各個系統中的 vim 好像都有) <br>
   可以通過 `vim --version` 檢查有麼有 python 支持。
   如果有 python 支持 vesrion 中會列出: +python or +python/dyn or +python3 or +python3/dyn。
   具體區別請參考`:help vesrion`
 * vim 為了和 python 交互，輸出了"vim" module 。
   在 VIM  process 中，這是一個 C 實現的 Python module。
   有關"vim" module 使用的細節可參閱 vim document `:help if_pyth.txt`。
   它實現的細節在 vim source code: if_py_both.h, if_python.c, if_python3.c 等文件中看到。

= General =
== Singly linked list ==
一些基本的單向鏈表測試
 * gist: https://gist.github.com/xiongjia/11311784
 * `list_get_middle_node`: <br>
   得到 linked list 得中間點參看, function `list_get_middle_node`。<br>
   應該是一個比較基本雙指針方法，用一個 `fast_prt` 和一個 `slow_ptr`，
   fast_prt 每次推進 2 格, slow_ptr 一次推進一格。等 fast_ptr 到頂時，
   slow_ptr 就是中間。( 同樣得方法也可以用於取 1/3 點, 1/4 點等等, 
   也可以用於得到倒數第 N 個節點，比如 fast_ptr 前進 N 格, slow_ptr 前进一格)
== Liquibase sample ==
一個基本的 liquibase 使用。
 * gist: https://gist.github.com/xiongjia/455c27bb728325542f66
 * 注意: 需要配置正確的 JDBC Driver， Sample 中用的是 SQLite3。具體參看 gist 中的 readme。

